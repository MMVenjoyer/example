# -*- coding: utf-8 -*-
import asyncio
import logging
import markups as kb
import aiohttp

from datetime import datetime
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from db import DataManipulation
from settings import TOKEN


logging.basicConfig(level = logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserState(StatesGroup):
    product_article = State()


async def get_data_by_article(product_article: int) -> (tuple[str, int, int, float, int]):
	'''–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫–ª—é –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ç–µ–∂–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–∞–¥'''
	async with aiohttp.ClientSession() as session:
		async with session.get(f'https://card.wb.ru/cards/v1/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={product_article}') as result:
			result_status = result.status
			if result_status == 200:
				result = await result.json()
				result = result['data']['products'][0]
				product_name = result['name']
				product_article = result['id']
				product_price = result['salePriceU']
				product_rate = result['reviewRating']
				try:
					product_last = result['sizes'][0]['stocks'][0]['qty']
				except:
					product_last = 0

				return (product_name, product_article, product_price, product_rate, product_last,)
			else:
				return False


async def get_generated_answer(text_to_generate: tuple, status: bool) -> str:
	'''–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –≤ –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –±–¥(–Ω–µ –±–æ–ª—å—à–µ 5)'''
	if status:
		return f"""
üí¨–ù–∞–∑–≤–∞–Ω–∏–µ: {text_to_generate[0]}

üÜî–ê—Ä—Ç–∏–∫—É–ª: {text_to_generate[1]}
üí∏–¶–µ–Ω–∞: {str(text_to_generate[2])[:-2]} —Ä—É–±
‚≠êÔ∏è–†–µ–π—Ç–∏–Ω–≥: {text_to_generate[3]}
üè¢–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: {text_to_generate[4]}"""
	
	else:
		answer = ''
		for i in range(len(text_to_generate)):
			answer += f'''

{i+1} –ó–∞—è–≤–∫–∞:
ID: {text_to_generate[i].user_id}
–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {text_to_generate[i].send_time}
–ê—Ä—Ç–∏–∫–ª—å: {text_to_generate[i].product_article}'''
		return answer


####################################################################
# 					–•–≠–ù–î–õ–ï–†–´ –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô					   #
####################################################################


@dp.message_handler(commands = ['start'])
async def get_start(message: types.Message):
	await bot.send_message(message.from_user.id, '–ë–æ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞', reply_markup=kb.kb_menu)


@dp.message_handler(text = ['–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É‚ú≥Ô∏è', '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î‚è∫'])
async def get_main_menu(message: types.Message):
	if message.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É‚ú≥Ô∏è': # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∞—Ä—Ç–∏–∫–ª—é
		await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∞—Ä—Ç–∏–∫—É–ª:')
		await UserState.product_article.set()

	elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î‚è∫': # –ü–æ–ª—É—á–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
		result = DataManipulation.get_last_requests(message.from_user.id, 5)
		if len(result) < 1:
			await bot.send_message(message.from_user.id, '–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ')
		else:
			answer_text = await asyncio.create_task(get_generated_answer(result, False))
			await bot.send_message(message.from_user.id, answer_text)


####################################################################
# 							–•–≠–ù–î–õ–ï–†–´ FSM						   #
####################################################################
			

@dp.message_handler(state=UserState.product_article)
async def get_product_article(message: types.Message, state: FSMContext):
	await state.update_data(product_article=message.text)
	state_data = await state.get_data()
	product_article = state_data['product_article']
	if product_article.isdigit() and 7 < len(str(product_article)) < 14:
		result = await asyncio.create_task(get_data_by_article(int(product_article)))
		if result:
			try:
				DataManipulation.write_data(int(message.from_user.id), str(datetime.now()), int(result[1]))
			except:
				print('–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
			answer_text = await asyncio.create_task(get_generated_answer(result, True))
			await bot.send_message(message.from_user.id, answer_text)
		else:
			await bot.send_message(message.from_user.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞!")
	else:
		await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª!")

	await state.finish()



######################################################################################################################################


if __name__ == "__main__":
	executor.start_polling(dp, skip_updates = True)
